<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>
<!-- aop实现方式一：   -->
    <!--第一步，先注册bean-->
    <bean id="userService" class="com.yang.service.UserServiceImpl"></bean>
    <bean id="log" class="com.yang.log.Log"></bean>
    <bean id="afterlog" class="com.yang.log.AfterLog"></bean>

    <!--第二步，配置aop：需要在文件头导入支持-->
    <aop:config>
<!--切入点，然后写表达式，表面在哪里类的方法进行切入，需要表面方法，参数等等情况-->
        <aop:pointcut id="pointcut" expression="execution(* com.yang.service.UserServiceImpl.*(..))"/>
<!--    执行环绕增加-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"></aop:advisor>
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>


    <!-- aop实现方式2：   -->

<bean id="diyPointCut" class="com.yang.demo02.diy.DiyPointCut"></bean>

<aop:config>
<!--    切面是一个类：aspect，自己写好了的-->
    <aop:aspect ref="diyPointCut">
<!--        切入点: 在那个类的那个方法进行切入-->
        <aop:pointcut id="point" expression="execution(* com.yang.service.UserServiceImpl.*(..))"/>
<!--        通知：使用切面定义的那个方法进行执行，下面演示了自定义的before和after方法-->
        <aop:before method="before" pointcut-ref="point"/>
        <aop:after method="after" pointcut-ref="point"/>
    </aop:aspect>

</aop:config>


</beans>